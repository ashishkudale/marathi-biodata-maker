'use client';

import React, { useState } from 'react';
import { useForm } from 'react-hook-form';
import { ReactTransliterate } from 'react-transliterate';
import 'react-transliterate/dist/index.css';
import { useBiodataStore } from '@/lib/store';

export default function PersonalInfoStep() {
  const { biodataData, updateBiodata, setStep, currentStep } = useBiodataStore();

  // States for transliteration fields
  const [nameMarathi, setNameMarathi] = useState(biodataData?.personalInfo?.name || '');
  const [birthPlace, setBirthPlace] = useState(biodataData?.personalInfo?.birthPlace || '');
  const [kuldaivat, setKuldaivat] = useState(biodataData?.personalInfo?.kuldaivat || '');
  const [gotra, setGotra] = useState(biodataData?.personalInfo?.gotra || '');
  const [rashi, setRashi] = useState(biodataData?.personalInfo?.rashi || '');
  const [nakshatra, setNakshatra] = useState(biodataData?.personalInfo?.nakshatra || '');

  const { register, handleSubmit, formState: { errors } } = useForm({
    defaultValues: {
      dateOfBirth: biodataData?.personalInfo?.dateOfBirth ?? '',
      birthTime: biodataData?.personalInfo?.birthTime ?? '',
      religion: biodataData?.personalInfo?.religion ?? '',
      caste: biodataData?.personalInfo?.caste ?? '',
      height: biodataData?.personalInfo?.height ?? '',
      gan: biodataData?.personalInfo?.gan ?? '',
      nadi: biodataData?.personalInfo?.nadi ?? '',
      manglik: biodataData?.personalInfo?.manglik ?? '',
      colour: biodataData?.personalInfo?.colour ?? '',
      bloodGroup: biodataData?.personalInfo?.bloodGroup ?? '',
      education: biodataData?.personalInfo?.education ?? '',
      jobOrBusiness: biodataData?.personalInfo?.jobOrBusiness ?? '',
      salary: biodataData?.personalInfo?.salary ?? '',
    }
  });

  const onSubmit = (formData: any) => {
    const updatedData = {
      ...formData,
      name: nameMarathi,
      birthPlace,
      kuldaivat,
      gotra,
      rashi,
      nakshatra,
    };
    updateBiodata({ personalInfo: updatedData });
    setStep(currentStep + 1);
  };

  const handleBack = () => {
    setStep(currentStep - 1);
  };

  return (
    <form onSubmit={handleSubmit(onSubmit)} className="space-y-6">
      <div>
        <h2 className="text-2xl font-bold text-gray-800 mb-2">
          ‡§µ‡•à‡§Ø‡§ï‡•ç‡§§‡§ø‡§ï ‡§Æ‡§æ‡§π‡§ø‡§§‡•Ä / Personal Information
        </h2>
        <p className="text-gray-600 mb-6">
          üí° Type in English to get Marathi (* = Required)
        </p>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        {/* Name - WITH TRANSLITERATION */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            ‡§®‡§æ‡§µ / Name *
          </label>
          <ReactTransliterate
            value={nameMarathi}
            onChangeText={setNameMarathi}
            lang="mr"
            placeholder="Type: amit ‚Üí ‡§Ö‡§Æ‡§ø‡§§"
            className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500"
          />
          {!nameMarathi && <p className="text-red-500 text-xs mt-1">Name is required</p>}
        </div>

        {/* Date of Birth */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            ‡§ú‡§®‡•ç‡§Æ‡§§‡§æ‡§∞‡•Ä‡§ñ / Date of Birth *
          </label>
          <input
            {...register('dateOfBirth', { required: 'Date of birth is required' })}
            type="date"
            className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500"
          />
          {errors.dateOfBirth && (
            <p className="text-red-500 text-xs mt-1">{errors.dateOfBirth.message as string}</p>
          )}
        </div>

        {/* Birth Time */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            ‡§ú‡§®‡•ç‡§Æ ‡§µ‡•á‡§≥ / Birth Time
          </label>
          <input
            {...register('birthTime')}
            type="time"
            className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500"
          />
        </div>

        {/* Birth Place - WITH TRANSLITERATION */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            ‡§ú‡§®‡•ç‡§Æ ‡§†‡§ø‡§ï‡§æ‡§£ / Birth Place
          </label>
          <ReactTransliterate
            value={birthPlace}
            onChangeText={setBirthPlace}
            lang="mr"
            placeholder="Type: pune ‚Üí ‡§™‡•Å‡§£‡•á"
            className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500"
          />
        </div>

        {/* Religion */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            ‡§ß‡§∞‡•ç‡§Æ / Religion *
          </label>
          <input
            {...register('religion', { required: 'Religion is required' })}
            type="text"
            placeholder="Hindu, Jain, etc."
            className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500"
          />
          {errors.religion && (
            <p className="text-red-500 text-xs mt-1">{errors.religion.message as string}</p>
          )}
        </div>

        {/* Caste */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            ‡§ú‡§æ‡§§ / Caste *
          </label>
          <input
            {...register('caste', { required: 'Caste is required' })}
            type="text"
            placeholder="Maratha, Brahmin, etc."
            className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500"
          />
          {errors.caste && (
            <p className="text-red-500 text-xs mt-1">{errors.caste.message as string}</p>
          )}
        </div>

        {/* Kuldaivat - WITH TRANSLITERATION */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            ‡§ï‡•Å‡§≤‡§¶‡•à‡§µ‡§§ / Kuldaivat
          </label>
          <ReactTransliterate
            value={kuldaivat}
            onChangeText={setKuldaivat}
            lang="mr"
            placeholder="Type: bhavani ‚Üí ‡§≠‡§µ‡§æ‡§®‡•Ä"
            className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500"
          />
        </div>

        {/* Gotra - WITH TRANSLITERATION */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            ‡§ó‡•ã‡§§‡•ç‡§∞ / Gotra
          </label>
          <ReactTransliterate
            value={gotra}
            onChangeText={setGotra}
            lang="mr"
            placeholder="Type in English"
            className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500"
          />
        </div>

        {/* Rashi - WITH TRANSLITERATION */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            ‡§∞‡§æ‡§∂‡•Ä / Rashi
          </label>
          <ReactTransliterate
            value={rashi}
            onChangeText={setRashi}
            lang="mr"
            placeholder="Type: mesh ‚Üí ‡§Æ‡•á‡§∑"
            className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500"
          />
        </div>

        {/* Nakshatra - WITH TRANSLITERATION */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            ‡§®‡§ï‡•ç‡§∑‡§§‡•ç‡§∞ / Nakshatra
          </label>
          <ReactTransliterate
            value={nakshatra}
            onChangeText={setNakshatra}
            lang="mr"
            placeholder="Type: ashwini ‚Üí ‡§Ö‡§∂‡•ç‡§µ‡§ø‡§®‡•Ä"
            className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500"
          />
        </div>

        {/* Gan */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            ‡§ó‡§£ / Gan
          </label>
          <select
            {...register('gan')}
            className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500"
          >
            <option value="">Select / ‡§®‡§ø‡§µ‡§°‡§æ</option>
            <option value="Dev">Dev / ‡§¶‡•á‡§µ</option>
            <option value="Manushya">Manushya / ‡§Æ‡§®‡•Å‡§∑‡•ç‡§Ø</option>
            <option value="Rakshasa">Rakshasa / ‡§∞‡§æ‡§ï‡•ç‡§∑‡§∏</option>
          </select>
        </div>

        {/* Nadi */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            ‡§®‡§æ‡§°‡•Ä / Nadi
          </label>
          <select
            {...register('nadi')}
            className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500"
          >
            <option value="">Select / ‡§®‡§ø‡§µ‡§°‡§æ</option>
            <option value="Adi">Adi / ‡§Ü‡§¶‡§ø</option>
            <option value="Madhya">Madhya / ‡§Æ‡§ß‡•ç‡§Ø</option>
            <option value="Antya">Antya / ‡§Ö‡§Ç‡§§‡•ç‡§Ø</option>
          </select>
        </div>

        {/* Manglik */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            ‡§Æ‡§æ‡§Ç‡§ó‡§≤‡§ø‡§ï / Manglik
          </label>
          <select
            {...register('manglik')}
            className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500"
          >
            <option value="">Select / ‡§®‡§ø‡§µ‡§°‡§æ</option>
            <option value="Yes">Yes / ‡§π‡•ã‡§Ø</option>
            <option value="No">No / ‡§®‡§æ‡§π‡•Ä</option>
            <option value="Anshik">Anshik / ‡§Ö‡§Ç‡§∂‡§ø‡§ï</option>
          </select>
        </div>

        {/* Height */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            ‡§â‡§Ç‡§ö‡•Ä / Height *
          </label>
          <input
            {...register('height', { required: 'Height is required' })}
            type="text"
            placeholder="e.g., 5'6''"
            className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500"
          />
          {errors.height && (
            <p className="text-red-500 text-xs mt-1">{errors.height.message as string}</p>
          )}
        </div>

        {/* Colour */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            ‡§µ‡§∞‡•ç‡§£ / Colour
          </label>
          <select
            {...register('colour')}
            className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500"
          >
            <option value="">Select / ‡§®‡§ø‡§µ‡§°‡§æ</option>
            <option value="Fair">Fair / ‡§ó‡•ã‡§∞‡§æ</option>
            <option value="Wheatish">Wheatish / ‡§ó‡§µ‡•ç‡§π‡§æ‡§≥</option>
            <option value="Dark">Dark / ‡§∏‡§æ‡§µ‡§≥‡§æ</option>
          </select>
        </div>

        {/* Blood Group */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            ‡§∞‡§ï‡•ç‡§§‡§ó‡§ü / Blood Group
          </label>
          <select
            {...register('bloodGroup')}
            className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500"
          >
            <option value="">Select / ‡§®‡§ø‡§µ‡§°‡§æ</option>
            <option value="A+">A+</option>
            <option value="A-">A-</option>
            <option value="B+">B+</option>
            <option value="B-">B-</option>
            <option value="AB+">AB+</option>
            <option value="AB-">AB-</option>
            <option value="O+">O+</option>
            <option value="O-">O-</option>
          </select>
        </div>

        {/* Education */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            ‡§∂‡§ø‡§ï‡•ç‡§∑‡§£ / Education *
          </label>
          <input
            {...register('education', { required: 'Education is required' })}
            type="text"
            placeholder="B.E., MBA, etc."
            className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500"
          />
          {errors.education && (
            <p className="text-red-500 text-xs mt-1">{errors.education.message as string}</p>
          )}
        </div>

        {/* Job/Business */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            ‡§®‡•ã‡§ï‡§∞‡•Ä/‡§µ‡•ç‡§Ø‡§µ‡§∏‡§æ‡§Ø / Job/Business *
          </label>
          <input
            {...register('jobOrBusiness', { required: 'Job/Business is required' })}
            type="text"
            placeholder="Software Engineer, Business"
            className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500"
          />
          {errors.jobOrBusiness && (
            <p className="text-red-500 text-xs mt-1">{errors.jobOrBusiness.message as string}</p>
          )}
        </div>

        {/* Salary */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            ‡§µ‡§æ‡§∞‡•ç‡§∑‡§ø‡§ï ‡§â‡§§‡•ç‡§™‡§®‡•ç‡§® / Annual Salary *
          </label>
          <input
            {...register('salary', { required: 'Salary is required' })}
            type="text"
            placeholder="5-6 LPA"
            className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500"
          />
          {errors.salary && (
            <p className="text-red-500 text-xs mt-1">{errors.salary.message as string}</p>
          )}
        </div>
      </div>

      {/* Info Box */}
      <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
        <p className="text-sm text-blue-800">
          <strong>üí° Tip:</strong> Type in English (e.g., "ram") and get Marathi suggestions (‡§∞‡§æ‡§Æ)
        </p>
      </div>

      <div className="flex gap-4">
        <button
          type="button"
          onClick={handleBack}
          className="flex-1 bg-gray-200 text-gray-700 py-3 rounded-lg font-semibold hover:bg-gray-300 transition"
        >
          ‚Üê Back / ‡§Æ‡§æ‡§ó‡•á
        </button>
        <button
          type="submit"
          className="flex-1 bg-orange-500 text-white py-3 rounded-lg font-semibold hover:bg-orange-600 transition"
        >
          Next Step ‚Üí / ‡§™‡•Å‡§¢‡•á
        </button>
      </div>
    </form>
  );
}
